<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Table</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-900 text-white p-10">
    <div class="flex items-center justify-center">
        <form id="eventForm" class="flex gap-2 bg-gray-800 p-4 rounded-lg">
            <input type="text" id="name" placeholder="Name" class="bg-gray-700 text-white p-2 rounded">
            <textarea id="description" placeholder="Description" class="bg-gray-700 text-white p-2 rounded"></textarea>
            <input type="text" id="location" placeholder="Location" class="bg-gray-700 text-white p-2 rounded">
            <input type="datetime-local" id="start_time" class="bg-gray-700 text-white p-2 rounded">
            <input type="datetime-local" id="end_time" class="bg-gray-700 text-white p-2 rounded">
            <input type="number" id="created_by" placeholder="Created By" class="bg-gray-700 text-white p-2 rounded">
            <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">Insert</button>
        </form>
    </div>
    <div class="overflow-x-auto">
        <div id="eventContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
            <!-- Events will be dynamically added here -->
        </div>
    </div>

    <script>
        var flag = false;
        async function fetchEvents() {
            try {
                const response = await axios.get('http://localhost:3000/api/event/dashbord');
                const events = response.data;
                const eventContainer = document.getElementById('eventContainer');
                eventContainer.innerHTML = '';

                events.forEach(event => {
                    const formattedStartTime = formatDateTimeLocal(new Date(event.start_time));
                    const formattedEndTime = formatDateTimeLocal(new Date(event.end_time));
                    console.log(new Date(event.start_time));
                    const eventCard = document.createElement('div');
                    eventCard.classList.add("bg-gray-800", "text-white", "p-4", "rounded-lg", "shadow", "space-y-2", "form-container");
                    eventCard.innerHTML = `<p>${event.id}</p>
                     <div class='font-bold text-lg'><input type='text' class='bg-gray-700 text-white p-1 w-full event-name' value='${event.name}'></div>
                    <textarea class='bg-gray-700 text-white p-1 w-full event-description'>${event.description}</textarea>
                    <p class='text-sm text-gray-400'>Location: <input type='text' class='bg-gray-700 text-white p-1 w-full event-location' value='${event.location}'></p>
                    <p class='text-sm text-gray-400'>Start: <input type='datetime-local' class='bg-gray-700 text-white p-1 w-full event-start-time' value='${formattedStartTime}'></p>
                    <p class='text-sm text-gray-400'>End: <input type='datetime-local' class='bg-gray-700 text-white p-1 w-full event-end-time' value='${formattedEndTime}'></p>
                    <p class='text-sm text-gray-400'>Users: <input type='number' class='bg-gray-700 text-white p-1 w-full event-numOFUser' value='${event.numOFUser}'></p>
                    <p class='text-sm text-gray-400'>Created By: <input type='number' class='bg-gray-700 text-white p-1 w-full event-created-by' value='${event.created_by || ''}'></p>
                    <p class='text-sm text-gray-400'>Deleted: <input type='checkbox' class='event-is-deleted' ${event.is_deleted ? 'checked' : ''}></p>
                    <p class='text-xs text-gray-500'>Created At: <input type='text' class='bg-gray-700 text-white p-1 w-full' value='${event.created_at}' readonly></p>
                    <p class='text-xs text-gray-500'>Updated At: <input type='text' class='bg-gray-700 text-white p-1 w-full' value='${event.updated_at}' readonly></p>
                    <img src="${event.image}" class="w-full h-32 object-cover rounded event-image"/>
                    <input type="file" class="bg-gray-700 text-white p-1 w-full image" onchange="previewImage(event)">
                    <div class='flex justify-between mt-2'>
                        <button class='bg-blue-500 text-white px-3 py-1 rounded update-btn' data-id='${event.id}'>Update</button>
                    </div>
                `;
                    eventContainer.appendChild(eventCard);
                });
            } catch (error) {
                console.error("Error fetching events:", error);
            }
        }

        document.addEventListener("DOMContentLoaded", async function () {
            await fetchEvents();

            document.getElementById("eventContainer").addEventListener("click", async function (event) {
                const target = event.target;
                if (target.classList.contains("update-btn")) {
                    // Handle full event update
                    const row = target.closest(".form-container");
                    const id = target.getAttribute("data-id");
                    const formData = new FormData();
                    var updatedEvent = null;
                    if (flag) {
                        formData.append("name", row.querySelector(".event-name").value);
                        formData.append("description", row.querySelector(".event-description").value);
                        formData.append("location", row.querySelector(".event-location").value);
                        formData.append("start_time", row.querySelector(".event-start-time").value);
                        formData.append("end_time", row.querySelector(".event-end-time").value);
                        formData.append("numOFUser", parseInt(row.querySelector(".event-numOFUser").value) || 0);
                        formData.append("created_by", parseInt(row.querySelector(".event-created-by").value) || null);
                        formData.append("is_deleted", row.querySelector(".event-is-deleted").checked);
                        formData.append("image", row.querySelector(".image").files[0]);
                    }
                    else {
                        updatedEvent = {
                            name: row.querySelector(".event-name").value,
                            description: row.querySelector(".event-description").value,
                            location: row.querySelector(".event-location").value,
                            start_time: row.querySelector(".event-start-time").value, // Ensuring UTC format
                            end_time:row.querySelector(".event-end-time").value,
                            created_by: parseInt(row.querySelector(".event-created-by").value) || null,
                            is_deleted: row.querySelector(".event-is-deleted").checked,
                            image: row.querySelector(".event-image").src,
                        };

                    }
                    try {
                        console.log(updatedEvent ? updatedEvent : formData);
                        await axios.put(`http://localhost:3000/api/event/dashbord/${id}`, updatedEvent ? updatedEvent : formData);

                        alert("Event updated successfully ✅");
                        await fetchEvents(); // Refresh table after update
                    } catch (error) {
                        alert("❌ Error updating event!");
                        console.error("Error updating event:", error);
                    }
                }
                else if (target.classList.contains("image-update-btn")) {
                    // Handle only image update
                    const id = target.getAttribute("data-id");
                    await UpdateImage(id);
                }
            });
        });

    </script>
    <script>
        document.getElementById('eventForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const eventData = {
                name: document.getElementById('name').value,
                description: document.getElementById('description').value,
                location: document.getElementById('location').value,
                start_time: document.getElementById('start_time').value,
                end_time: document.getElementById('end_time').value,
                created_by: document.getElementById('created_by').value
            };


            try {
                await axios.post('http://localhost:3000/api/event/', eventData);
                alert('Event inserted successfully');
                document.getElementById('eventForm').reset();
            } catch (error) {
                console.error('Error inserting event:', error);
            }
        });
        function previewImage(event) {
            const box = event.target.parentNode;
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    flag = true;
                    const imageLabel = box.querySelector(".event-image");
                    imageLabel.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        }
        const formatDateTimeLocal = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are 0-based
            const day = String(date.getDate()).padStart(2, "0");
            const hours = String(date.getHours()).padStart(2, "0");
            const minutes = String(date.getMinutes()).padStart(2, "0");

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        };
    </script>
</body>

</html>